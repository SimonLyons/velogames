#  Sandpit exercise to practice simple regression on test data
#  From the guide on https://ww2.coastal.edu/kingw/statistics/R-tutorials/multregr.html
#
library(MASS)
st <- as.data.frame(state.x77)
str(st)
colnames(st)[4] = "Life.Exp"
colnames(st)[6] = "HS.Grad"
# create a new column in st
st$Density <- st$Population * 1000 / st$Area
summary(st)
round(cor(st), 3)
plot(st)
mfrow=(c(3,3))
par(mfrow)
simon_lm <- lm(formula = Life.Exp ~ Population + Murder + HS.Grad + Frost, data = st)
simon_lm
simon_data <- c("Population" = mean(st[,"Population"]), "Murder" = mean(st[, "Murder"]), "HS.Grad" = mean(st[, "HS.Grad"]), "Frost" = mean(st[, "Frost"]))
predict(simon_lm, simon_data, 1)
first_row <- xpathApply(cn_html, "//tr[@class='data-i'")
library(XML)
cn_html <- htmlParse("http://www.cyclingnews.com/races/calendar/2016/")
first_row <- xpathApply(cn_html, "//tr[@class='data-i'")
cn_html <- htmlParse("http://www.cyclingnews.com/races/calendar/2016/")
cn_html_file <- "C:/aa Simon Lyons/2.0 Work/4.0 Data Analysis/4.1 Sandpit"
cn_html <- htmlParse(cn_html_file)
read.delim("C:/aa Simon Lyons/2.0 Work/4.0 Data Analysis/4.1 Sandpit/cn_2016_calendar.txt")
cn_html <- read.delim("C:/aa Simon Lyons/2.0 Work/4.0 Data Analysis/4.1 Sandpit/cn_2016_calendar.txt")
cn_html <- htmlParse(cn_html)
cn_html <- readLines("C:/aa Simon Lyons/2.0 Work/4.0 Data Analysis/4.1 Sandpit/cn_2016_calendar.txt")
cn_html <- paste(readLines("C:/aa Simon Lyons/2.0 Work/4.0 Data Analysis/4.1 Sandpit/cn_2016_calendar.txt"), collapse = "\n")
cn_html <- htmlParse(cn_html)
cn_html
first_row <- xpathApply(cn_html, "//tr")
first_row
first_row[3]
first_row <- xpathApply(cn_html, "//tr[@class='data-i'")
first_row <- xpathApply(cn_html, "@class='data-i")
first_row <- xpathApply(cn_html, "[@class='data-i]")
first_row <- xpathApply(cn_html, "\\tr[@class]")
first_row <- xpathApply(cn_html, "//tr[@class]")
first_row
first_row <- xpathApply(cn_html, "//tr[@class='data-i]")
first_row <- xpathApply(cn_html, "//tr/td", xmlAttrs)
first_row
cn_html
first_row[3]
first_row <- xpathApply(cn_html, "//tr/td", xmlValue)
first_row[3]
first_row <- xpathApply(cn_html, "//tr", xmlValue)
first_row[3]
first_row <- xpathApply(cn_html, "//tr", xmlAttrs)
first_row[3]
iris
library(caret)
head(iris)
ggplot(data = iris, aes(Species))
ggplot(data = iris, aes(Species)) + geom_bar()
ggplot(data = iris, aes(Species)) + geom_bar(colour = Species)
ggplot(data = iris, aes(Species)) + geom_bar(colour = iris$Species)
nrow(iris)
sample(nrow(iris))
sample(nrow(iris))
samp_iris <- sample(nrow(iris), size = 0.6 * nrow(iris))
samp_iris
set.seed(78)
sample(nrow(iris), size = 0.6 * nrow(iris))
sample(nrow(iris), size = 0.6 * nrow(iris))
sample(nrow(iris), size = 0.6 * nrow(iris))
sample(nrow(iris), size = 0.6 * nrow(iris))
samp_iris <- sample(nrow(iris), size = 0.6 * nrow(iris))
samp_iris
samp_iris
samp_iris
samp_iris
iris_train <- iris[samp_iris,]
iris_test <-  iris[-samp_iris,]
iris_train
iris_test
iris
set.seed(78)
samp_iris <- sample(nrow(iris), size = 0.6 * nrow(iris))
iris_train <- iris[samp_iris,]
iris_test <-  iris[-samp_iris,]
iris_train
iris_test
nrow(iris_train)
nrow(iris_test)
library(caret)
iris_model <- train(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris_train, method = "rf")
iris_model
iris_01 <- predict(iris_model, newdata = iris_model)
iris_01 <- predict(iris_model, newdata = iris_test)
iris_01
table(iris_test$Species, iris_01)
iris_01_table <- cbind(ris_test$Species, iris_01)
iris_01_table <- cbind(iris_test$Species, iris_01)
iris_01_table
lapply(iris_method, train(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris_train, method = iris_method))
lapply(iris_method, function(x) train(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris_train, method = x))
iris_method <- c("glm", "rf")
lapply(iris_method, function(x) train(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris_train, method = x))
iris_02 <- lapply(iris_method, function(x) train(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris_train, method = x))
iris_02
# Practice script for my introduction to the 'caret' package for predictive model evaluation
#
# Drawn from the example on the R Bloggers website:
# https://www.r-bloggers.com/a-quick-introduction-to-machine-learning-in-r-with-caret/
library(ggplot2)
library(caret)
mtcars
wt_mpg_plot <- ggplot(data = mtcars, aes(wt, mpg)) + geom_point(color = "red", size = mtcars$disp/30)
wt_mpg_plot
result <- glm(mpg ~ wt, data = mtcars)
#ggplot(data = mtcars, aes(x = wt, y = mpg)) + geom_point() + geom_abline(slope = coef.slope, intercept = coef.icept, color = "red")
ggplot(data = mtcars, aes(x = wt, y = mpg)) + geom_abline(slope = result$coefficients[2], intercept = result$coefficients[1], colour = "red") + geom_point()
set.seed(123)
my_samp <- sample(nrow(mtcars), 0.6 * nrow(mtcars))
mt_train <- mtcars[my_samp,]
mt_test <- mtcars[-my_samp,]
# basic model development with lm
model_lm <- lm(mpg ~ wt, data = mt_train)
pred_lm <- predict(model_lm, newdata = mt_test)
table(mt_test$mpg, pred_lm)
delta_lm <- mt_test$mpg - pred_lm
# model development using the 'train' function from the 'caret' package
model_caret <- train(mpg ~ wt + disp + hp, mt_train, method = "lm")
pred_caret <- predict(model_caret, newdata = mt_test)
delta_caret <- mt_test$mpg - pred_caret
# test difference between caret and basic lm model methods
delta_caret - delta_lm
model_lm$coefficients[3]
model_caret$results
# model development using the 'train' function from the 'caret' package - this time using the random forest method
model_rf <- train(mpg ~ wt + disp + hp, mt_train, method = "rf")
pred_rf <- predict(model_rf, newdata = mt_test)
delta_rf <- mt_test$mpg - pred_rf
# test difference between caret and basic lm model methods
delta_rf - delta_lm
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
total <- 40
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
total <- 1000
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
license()
library(ISLR); library(caret); data(Wage);
library(ggplot2)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list = FALSE)
training <- Wage[inTrain, ]; testing <- Wage[-inTrain, ]
dim(training)
dim(testing)
summary(Wage)
model <- train(wage ~ ., data = cbind(training[ , c("age", "wage")], predict(dummies, newdata = training)), method = "lm")
results <- predict(model, newdata = cbind(testing[ , c("age", "wage")], predict(dummies, newdata = testing)))
dummies <- dummyVars(wage ~ jobclass + education, training)
head(predict(dummies, newdata = training))
featurePlot(x = training[, c("age", "education", "jobclass")], y = training$wage, plot = "pairs")
summary(Wage)
qplot(education, wage, colour = jobclass, data = Wage)
cor(predict(dummies, newdata = training)[ , 1:2], predict(dummies, newdata = training)[ , 3:6])
model <- train(wage ~ ., data = cbind(training[ , c("age", "wage")], predict(dummies, newdata = training)), method = "lm")
results <- predict(model, newdata = cbind(testing[ , c("age", "wage")], predict(dummies, newdata = testing)))
coursera_training_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
coursera_testing_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
fit_data_train <- read.csv(coursera_training_url)
fit_data_test <- read.csv(coursera_testing_url)
names(fit_data_train)
summary(fit_data_train)
head(fit_data_train)
names(fit_data_train)
head(fit_data_train)
require(dplyr)
require(ckanr)
require(shiny)
require(rvest)
require(xml2)
require(RMySQL)
velo_url <- "https://www.velogames.com/tour-de-france/2016/leaguescores.php?league=552723443913"
download.file(velo_url, "velo_url.xml")   # Using this as straight htmlParse of the link isn't working
race_html <- htmlParse("velo_url.xml")
velo_url <- "https://www.velogames.com/tour-de-france/2016/leaguescores.php?league=552723443913"
download.file(velo_url, "velo_url.xml")   # Using this as straight htmlParse of the link isn't working
download.file(velo_url, "velo_url.xml")   # Using this as straight htmlParse of the link isn't working
velo_url <- "https://www.velogames.com/tour-de-france/2015/leaguescores.php?league=552723443913"
download.file(velo_url, "velo_url.xml")   # Using this as straight htmlParse of the link isn't working
grep([[:alpha:]], "", "Stage 21")
grep("[[:alpha:]]", "", "Stage 21")
grep("([[:alpha:]])", "", "Stage 21")
grep(".*([[:alpha:]]+).*", "", "Stage 21")
grep(".*([[:alpha:]]+)*.", "", "Stage 21")
grep("([[:alpha:]]+)", "", "Stage 21")
grep("([[:alpha:]])", "", "Stage 21")
grep("([[:digit:]])", "", "Stage 21")
grep("Stage", "", "Stage 21")
grepl("Stage", "", "Stage 21")
gsub("([[:digit:]])", "", "Stage 21")
gsub("([[:alpha:]])", "", "Stage 21")
gsub("([[:alpha:]])(\\^)", "", "Stage 21")
gsub("(\\^)", "", "Stage 21")
gsub("([[:alpha:]])(\\*)", "", "Stage 21")
gsub("([[:alpha:]])(\^)", "", "Stage 21")
gsub("([[:alpha:]])([[:space:]])", "", "Stage 21")
gsub("([[:alpha:]])", "", "Stage 21")
gsub("([[:space:]])([[:alpha:]])", "", "Stage 21")
gsub("(\\s)([[:alpha:]])", "", "Stage 21")
gsub("(\\s)", "", "Stage 21")
gsub("(\\s)&([[:alpha:]])", "", "Stage 21")
gsub("([[:blank:]])&([[:alpha:]])", "", "Stage 21")
gsub("([[:blank:]])", "", "Stage 21")
require(dplyr)
gsub("([[:blank:]])", "", "Stage 21") %>% gsub("([[:alpha:]])", "")
first <- gsub("([[:blank:]])", "", "Stage 21")
gsub("([[:alpha:]])", "", first)
first <- gsub("([[:blank:]])|([[:alpha:]])", "", "Stage 21")
first
require(plotly)
require(XML)
require(dplyr)
setwd("C://aa Simon Lyons/2.0 Work/4.0 Data Analysis/4.1 Sandpit/Velogames/2016 Cunning Stunts Giro/")
velo_url <- "https://www.velogames.com/giro-ditalia/2016/leaguescores.php?league=2010629"
for (s in 1:21){
# Access velogames league webpage for stages 1 through 21
# for the Cunning Stunts 2016 Giro competition
velo_url <- paste("https://www.velogames.com/giro-ditalia/2016/leaguescores.php?league=2010629&ga=13&st=", s, sep = "")
# Using this as straight htmlParse of the link isn't working
download.file(velo_url, "velo_url.xml")
race_html <- htmlParse("velo_url.xml")
for (s in 1:21){
# Access velogames league webpage for stages 1 through 21
# for the Cunning Stunts 2016 Giro competition
velo_url <- paste("https://www.velogames.com/giro-ditalia/2016/leaguescores.php?league=2010629&ga=13&st=", s, sep = "")
# Using this as straight htmlParse of the link isn't working
download.file(velo_url, "velo_url.xml")
race_html <- htmlParse("velo_url.xml")
# Extract 'points', 'team' and 'directeur' details from webpage for league
points <- xpathApply(race_html, "//span/p/b", xmlValue)   # points extraction
points <- gsub(" points", "", points)
team <- xpathApply(race_html, "//h3/a", xmlValue)   # Team name extraction
directeur <- xpathApply(race_html, "//li/p", xmlValue)   # Extract name of the team manager/directeur
team_weblink <- xpathApply(race_html, "//h3/a", xmlAttrs)
team_weblink <- gsub("href", "", team_weblink)
velo_table <- as.data.frame(cbind(points, team, directeur, team_weblink))
velo_table[, 1] <- as.numeric(velo_table[,1])
velo_table[ ,2] <- as.character(velo_table[ ,2])
velo_table[ ,3] <- as.character(velo_table[ ,3])
velo_table[ ,4] <- as.character(velo_table[ ,4])
write.csv(velo_table, file = paste("giro_stage_", formatC(s, width=2, flag="0"), ".csv", sep = ""), row.names = FALSE)
}   # End FOR loop for number of stages
for (s in 1:21){
# Access velogames league webpage for stages 1 through 21
# for the Cunning Stunts 2016 Giro competition
velo_url <- paste("https://www.velogames.com/giro-ditalia/2016/leaguescores.php?league=2010629&ga=13&st=", s, sep = "")
# Using this as straight htmlParse of the link isn't working
download.file(velo_url, "velo_url.xml")
race_html <- htmlParse("velo_url.xml")
# Extract 'points', 'team' and 'directeur' details from webpage for league
points <- xpathApply(race_html, "//span/p/b", xmlValue)   # points extraction
points <- gsub(" points", "", points)
team <- xpathApply(race_html, "//h3/a", xmlValue)   # Team name extraction
directeur <- xpathApply(race_html, "//li/p", xmlValue)   # Extract name of the team manager/directeur
team_weblink <- xpathApply(race_html, "//h3/a", xmlAttrs)
team_weblink <- gsub("href", "", team_weblink)
velo_table <- as.data.frame(cbind(points, team, directeur, team_weblink))
velo_table[, 1] <- as.numeric(velo_table[,1])
velo_table[ ,2] <- as.character(velo_table[ ,2])
velo_table[ ,3] <- as.character(velo_table[ ,3])
velo_table[ ,4] <- as.character(velo_table[ ,4])
write.csv(velo_table, file = paste("giro_stage_", formatC(s, width=2, flag="0"), ".csv", sep = ""), row.names = FALSE)
}   # End FOR loop for number of stages
setwd("C://aa Simon Lyons/2.0 Work/4.0 Data Analysis/4.1 Sandpit/Velogames/2016 Cunning Stunts Giro/")
velo_table <- read.csv("giro_stage_01.csv", header = TRUE, sep = ",")
team_table_master_02 <- c()
n_teams <- nrow(velo_table)
giro_table_master <- c()
team_table_master_02 <- c()
for (t in 1:n_teams){   # Loop through each of the 11 teams
team_link <- velo_table$team_weblink[t]
team <- velo_table$team[t]
directeur <- velo_table$directeur[t]
team_table_master <- c()
for (s in 1:21){   # Loop through all of the stages for each team
team_url <- paste("https://www.velogames.com/giro-ditalia/2016/", team_link, "&ga=13&st=", s, sep = "")
download.file(team_url, "team_url.xml")
team_html <- htmlParse("team_url.xml")
# Extract table header data
table_header <- gsub("\r\n", "", xpathApply(team_html, "//table[@class='responsive']/thead/th", xmlValue))
table_header[[1]] <- "rider"   # Title for first column is missing. Insert 'rider' as title of column.
# Extract body elements from the table
rider <- gsub("\r\n", "", xpathApply(team_html, "//table[@class='responsive']/tbody/tr/td", xmlValue))
# Create empty dataframe to receive table data.
team_table <- data.frame(matrix(NA, nrow = 0, ncol = 13))
colnames(team_table) <- table_header
# Run loop to insert body elements into dataframe
for (r in 1:9){
team_table[r, ] <- rider[(r*13-12):(r*13)]
}
# Add the stage number to the dataframe, so it is included in the master list.
team_table$stage <- s
team_table$team_link <- team_link
team_table$directeur <- directeur
team_table$team <- team
# Add dataframe to master list
team_table_master[[s]] <- team_table
}
# Combine stage tables into single master dataframe
team_table_master_01 <- do.call(rbind, team_table_master)
# Remove weird column with no values
team_table_master_01 <- team_table_master_01[ , -4]
# Convert numerical columns into class 'numeric'
for (i in 3:13){
team_table_master_01[ , i] <- as.numeric(team_table_master_01[ , i])
}
team_table_master_02[[t]] <- team_table_master_01
}
giro_table_master <- do.call(rbind, team_table_master_02)[ , -14]
write.csv(giro_table_master, file = "giro_table_master.csv", sep = ",", row.names = FALSE, col.names = TRUE)
names(giro_table_master)
dtest <- giro_table_master %>%
filter(stage == 1) %>%
select(directeur, Tot) %>%
n()
uniq_riders <- unique(giro_table_master$rider)
uniq_riders
rider_scores <- as.numeric(lapply(uniq_riders, rider_total))
df <- as.data.frame(matrix(data = NA, nrow = 52, ncol = 2))
df[ ,1] <- uniq_riders
df[ ,2] <- rider_scores
colnames(df) <- c("rider", "total_score")
df <- df[rev(order(df$total_score)), ]
View(df)
rider_total <- function(rider){
score <- sum(giro_table_master[giro_table_master$rider == rider, ][!duplicated(giro_table_master[giro_table_master$rider == rider, ]$stage) , ]$Tot)
# rider_scores <- rbind(rider, score)
# return(rider_scores)
}
rider_scores <- as.numeric(lapply(uniq_riders, rider_total))
df <- as.data.frame(matrix(data = NA, nrow = 52, ncol = 2))
df[ ,1] <- uniq_riders
df[ ,2] <- rider_scores
colnames(df) <- c("rider", "total_score")
df <- df[rev(order(df$total_score)), ]
View(df)
rider_scores_dplyr <- giro_table_master %>%
group_by(rider) %>%
summarise(sum(Tot)) %>%
arrange(desc(`sum(Tot)`))
View(rider_scores_dplyr)
require(ggplot2)
ggplot(data = rider_scores_dplyr[1:10, ], aes(x = factor(rider_scores_dplyr$rider[1:10]), y = rider_scores_dplyr$`sum(Tot)`[1:10])) + geom_bar(stat = "identity", fill = "blue") + scale_x_discrete(limits = rider_scores_dplyr$rider[1:10]) + xlab("Rider") + ylab("Score") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
rider_cost <- giro_table_master %>%
rider_cost <- giro_table_master %>%
filter(stage == 1) %>%
group_by("Rider" = rider) %>%
summarise("Times Selected" = n()) %>%
arrange(desc(`Times Selected`))
kable(rider_cost[1:12,])
require(knitr)
kable(rider_cost[1:12,])
setwd("C://aa Simon Lyons/2.0 Work/4.0 Data Analysis/4.1 Sandpit/Velogames/2016 Cunning Stunts Giro/")
giro_table_master <- read.csv(file = "giro_table_master.csv", sep = ",")
rider_cost <- giro_table_master %>%
filter(stage == 1) %>%
group_by("Rider" = rider) %>%
summarise("Times Selected" = n()) %>%
arrange(desc(`Times Selected`))
kable(rider_cost[1:12,])
rider_scores_dplyr <- giro_table_master %>%
select(rider, stage, Tot) %>%
distinct %>%
group_by(rider) %>%
summarise(sum(Tot)) %>%
arrange(desc(`sum(Tot)`))
View(rider_scores_dplyr)
velo_table
table_header
team_table
View(team_table)
rider
team_table
team_table_master
View(team_table_master)
team_table_master_01
View(giro_table_master)
require(XML)
n_teams <- nrow(velo_table)
giro_table_master <- c()
setwd("C://aa Simon Lyons/2.0 Work/4.0 Data Analysis/4.1 Sandpit/Velogames/2016 Cunning Stunts Giro/")
velo_table <- read.csv("giro_stage_01.csv", header = TRUE, sep = ",")
team_table_master_02 <- c()
for (t in 1:n_teams){   # Loop through each of the 11 teams
team_link <- velo_table$team_weblink[t]
team <- velo_table$team[t]
directeur <- velo_table$directeur[t]
team_table_master <- c()
for (s in 1:22){   # Loop through all of the stages for each team. Stage 22 gives bonus points!
team_url <- paste("https://www.velogames.com/giro-ditalia/2016/", team_link, "&ga=13&st=", s, sep = "")
download.file(team_url, "team_url.xml")
team_html <- htmlParse("team_url.xml")
# Extract table header data
table_header <- gsub("\r\n", "", xpathApply(team_html, "//table[@class='responsive']/thead/th", xmlValue))
table_header[[1]] <- "rider"   # Title for first column is missing. Insert 'rider' as title of column.
# Extract body elements from the table
rider <- gsub("\r\n", "", xpathApply(team_html, "//table[@class='responsive']/tbody/tr/td", xmlValue))
# Create empty dataframe to receive table data.
team_table <- data.frame(matrix(NA, nrow = 0, ncol = 13))
colnames(team_table) <- table_header
# Run loop to insert body elements into dataframe
for (r in 1:9){
team_table[r, ] <- rider[(r*13-12):(r*13)]
}
# Add the stage number to the dataframe, so it is included in the master list.
team_table$stage <- s
team_table$team_link <- team_link
team_table$directeur <- directeur
team_table$team <- team
# Add dataframe to master list
team_table_master[[s]] <- team_table
}
# Combine stage tables into single master dataframe
team_table_master_01 <- do.call(rbind, team_table_master)
# Remove weird column with no values
team_table_master_01 <- team_table_master_01[ , -4]
# Convert numerical columns into class 'numeric'
for (i in 3:13){
team_table_master_01[ , i] <- as.numeric(team_table_master_01[ , i])
}
team_table_master_02[[t]] <- team_table_master_01
}
giro_table_master <- do.call(rbind, team_table_master_02)[ , -14]
write.csv(giro_table_master, file = "giro_table_master.csv", sep = ",", row.names = FALSE, col.names = TRUE)
View(giro_table_master)
uniq_riders <- unique(giro_table_master$rider)
length(uniq_riders)
filter(rider="Bob Jungels")
which_team_rider <- giro_table_master %>%
filter(rider="Bob Jungels")
filter(rider=="Bob Jungels")
which_team_rider <- giro_table_master %>%
filter(rider=="Bob Jungels")
which_team_rider
which_team_rider <- giro_table_master %>%
filter(rider=="Bob Jungels") %>%
group_by(directeur)
which_team_rider
group_by(unique(directeur))
which_team_rider <- giro_table_master %>%
filter(rider=="Bob Jungels") %>%
group_by(unique(directeur))
which_team_rider
which_team_rider <- giro_table_master %>%
filter(rider=="Bob Jungels") %>%
group_by_(unique(directeur))
which_team_rider
which_team_rider <- giro_table_master %>%
filter(rider=="Bob Jungels") %>%
distinct(directeur)
which_team_rider
which_team_rider <- giro_table_master %>%
filter(rider=="Johan Esteban Chaves") %>%
distinct(directeur)
which_team_rider
